/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as BrowsernessApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Health {
    export interface Options {
        environment?: core.Supplier<environments.BrowsernessApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Health check operations for the service and browser instances
 */
export class Health {
    protected readonly _options: Health.Options;

    constructor(_options: Health.Options = {}) {
        this._options = _options;
    }

    /**
     * Check service health status.
     *
     * @param {Health.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.health.check()
     */
    public check(requestOptions?: Health.RequestOptions): core.HttpResponsePromise<BrowsernessApi.HealthStatus> {
        return core.HttpResponsePromise.fromPromise(this.__check(requestOptions));
    }

    private async __check(
        requestOptions?: Health.RequestOptions,
    ): Promise<core.WithRawResponse<BrowsernessApi.HealthStatus>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BrowsernessApiEnvironment.Default,
                "health",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowsernessApi.HealthStatus, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BrowsernessApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowsernessApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowsernessApiTimeoutError("Timeout exceeded when calling GET /health.");
            case "unknown":
                throw new errors.BrowsernessApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Check the health status of a specific browser instance from database.
     *
     * @param {string} browserId
     * @param {Health.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowsernessApi.UnprocessableEntityError}
     *
     * @example
     *     await client.health.browserHealthCheck("browser_id")
     */
    public browserHealthCheck(
        browserId: string,
        requestOptions?: Health.RequestOptions,
    ): core.HttpResponsePromise<BrowsernessApi.HealthCheckResponse> {
        return core.HttpResponsePromise.fromPromise(this.__browserHealthCheck(browserId, requestOptions));
    }

    private async __browserHealthCheck(
        browserId: string,
        requestOptions?: Health.RequestOptions,
    ): Promise<core.WithRawResponse<BrowsernessApi.HealthCheckResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BrowsernessApiEnvironment.Default,
                `browsers/${encodeURIComponent(browserId)}/health`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowsernessApi.HealthCheckResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new BrowsernessApi.UnprocessableEntityError(
                        _response.error.body as BrowsernessApi.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowsernessApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowsernessApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowsernessApiTimeoutError(
                    "Timeout exceeded when calling GET /browsers/{browser_id}/health.",
                );
            case "unknown":
                throw new errors.BrowsernessApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
