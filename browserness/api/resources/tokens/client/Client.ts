/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as BrowsernessApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tokens {
    export interface Options {
        environment?: core.Supplier<environments.BrowsernessApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Operations for managing personal access tokens
 */
export class Tokens {
    protected readonly _options: Tokens.Options;

    constructor(_options: Tokens.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {BrowsernessApi.CreateTokenRequestEnhanced} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowsernessApi.UnprocessableEntityError}
     *
     * @example
     *     await client.tokens.issueToken({
     *         name: "name",
     *         user_id: "user_id"
     *     })
     */
    public issueToken(
        request: BrowsernessApi.CreateTokenRequestEnhanced,
        requestOptions?: Tokens.RequestOptions,
    ): core.HttpResponsePromise<any> {
        return core.HttpResponsePromise.fromPromise(this.__issueToken(request, requestOptions));
    }

    private async __issueToken(
        request: BrowsernessApi.CreateTokenRequestEnhanced,
        requestOptions?: Tokens.RequestOptions,
    ): Promise<core.WithRawResponse<any>> {
        const { "X-Admin-Key": adminKey, ..._body } = request;
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Admin-Key": adminKey != null ? adminKey : undefined,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BrowsernessApiEnvironment.Default,
                "admin/tokens",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new BrowsernessApi.UnprocessableEntityError(
                        _response.error.body as BrowsernessApi.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowsernessApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowsernessApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowsernessApiTimeoutError("Timeout exceeded when calling POST /admin/tokens.");
            case "unknown":
                throw new errors.BrowsernessApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} prefix
     * @param {BrowsernessApi.RevokeTokenRequest} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowsernessApi.UnprocessableEntityError}
     *
     * @example
     *     await client.tokens.revokeToken("prefix")
     */
    public revokeToken(
        prefix: string,
        request: BrowsernessApi.RevokeTokenRequest = {},
        requestOptions?: Tokens.RequestOptions,
    ): core.HttpResponsePromise<any> {
        return core.HttpResponsePromise.fromPromise(this.__revokeToken(prefix, request, requestOptions));
    }

    private async __revokeToken(
        prefix: string,
        request: BrowsernessApi.RevokeTokenRequest = {},
        requestOptions?: Tokens.RequestOptions,
    ): Promise<core.WithRawResponse<any>> {
        const { "X-Admin-Key": adminKey } = request;
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Admin-Key": adminKey != null ? adminKey : undefined,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BrowsernessApiEnvironment.Default,
                `admin/tokens/${encodeURIComponent(prefix)}/revoke`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new BrowsernessApi.UnprocessableEntityError(
                        _response.error.body as BrowsernessApi.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowsernessApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowsernessApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowsernessApiTimeoutError(
                    "Timeout exceeded when calling POST /admin/tokens/{prefix}/revoke.",
                );
            case "unknown":
                throw new errors.BrowsernessApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get the most recent token for a specific user.
     *
     * @param {string} userId
     * @param {BrowsernessApi.GetUserTokenEndpointRequest} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowsernessApi.UnprocessableEntityError}
     *
     * @example
     *     await client.tokens.getUserTokenEndpoint("user_id")
     */
    public getUserTokenEndpoint(
        userId: string,
        request: BrowsernessApi.GetUserTokenEndpointRequest = {},
        requestOptions?: Tokens.RequestOptions,
    ): core.HttpResponsePromise<any> {
        return core.HttpResponsePromise.fromPromise(this.__getUserTokenEndpoint(userId, request, requestOptions));
    }

    private async __getUserTokenEndpoint(
        userId: string,
        request: BrowsernessApi.GetUserTokenEndpointRequest = {},
        requestOptions?: Tokens.RequestOptions,
    ): Promise<core.WithRawResponse<any>> {
        const { include_raw_token: includeRawToken, "X-Admin-Key": adminKey } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (includeRawToken != null) {
            _queryParams["include_raw_token"] = includeRawToken.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Admin-Key": adminKey != null ? adminKey : undefined,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.BrowsernessApiEnvironment.Default,
                `admin/users/${encodeURIComponent(userId)}/token`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new BrowsernessApi.UnprocessableEntityError(
                        _response.error.body as BrowsernessApi.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowsernessApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowsernessApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowsernessApiTimeoutError(
                    "Timeout exceeded when calling GET /admin/users/{user_id}/token.",
                );
            case "unknown":
                throw new errors.BrowsernessApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
